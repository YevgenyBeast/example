// Code generated by MockGen. DO NOT EDIT.
// Source: ./analytics_grpc.pb.go

// Package mock_analyticspb is a generated GoMock package.
package mock_analyticspb

import (
	context "context"
	reflect "reflect"
	analyticspb "task/internal/adaptors/client/analyticspb"

	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
)

// MockAnalyticsClient is a mock of AnalyticsClient interface.
type MockAnalyticsClient struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsClientMockRecorder
}

// MockAnalyticsClientMockRecorder is the mock recorder for MockAnalyticsClient.
type MockAnalyticsClientMockRecorder struct {
	mock *MockAnalyticsClient
}

// NewMockAnalyticsClient creates a new mock instance.
func NewMockAnalyticsClient(ctrl *gomock.Controller) *MockAnalyticsClient {
	mock := &MockAnalyticsClient{ctrl: ctrl}
	mock.recorder = &MockAnalyticsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyticsClient) EXPECT() *MockAnalyticsClientMockRecorder {
	return m.recorder
}

// SendResult mocks base method.
func (m *MockAnalyticsClient) SendResult(ctx context.Context, in *analyticspb.ResultRq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendResult", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendResult indicates an expected call of SendResult.
func (mr *MockAnalyticsClientMockRecorder) SendResult(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResult", reflect.TypeOf((*MockAnalyticsClient)(nil).SendResult), varargs...)
}

// SendTimestamp mocks base method.
func (m *MockAnalyticsClient) SendTimestamp(ctx context.Context, in *analyticspb.TimestampRq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendTimestamp", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTimestamp indicates an expected call of SendTimestamp.
func (mr *MockAnalyticsClientMockRecorder) SendTimestamp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTimestamp", reflect.TypeOf((*MockAnalyticsClient)(nil).SendTimestamp), varargs...)
}

// MockAnalyticsServer is a mock of AnalyticsServer interface.
type MockAnalyticsServer struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsServerMockRecorder
}

// MockAnalyticsServerMockRecorder is the mock recorder for MockAnalyticsServer.
type MockAnalyticsServerMockRecorder struct {
	mock *MockAnalyticsServer
}

// NewMockAnalyticsServer creates a new mock instance.
func NewMockAnalyticsServer(ctrl *gomock.Controller) *MockAnalyticsServer {
	mock := &MockAnalyticsServer{ctrl: ctrl}
	mock.recorder = &MockAnalyticsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyticsServer) EXPECT() *MockAnalyticsServerMockRecorder {
	return m.recorder
}

// SendResult mocks base method.
func (m *MockAnalyticsServer) SendResult(arg0 context.Context, arg1 *analyticspb.ResultRq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResult", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendResult indicates an expected call of SendResult.
func (mr *MockAnalyticsServerMockRecorder) SendResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResult", reflect.TypeOf((*MockAnalyticsServer)(nil).SendResult), arg0, arg1)
}

// SendTimestamp mocks base method.
func (m *MockAnalyticsServer) SendTimestamp(arg0 context.Context, arg1 *analyticspb.TimestampRq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTimestamp", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTimestamp indicates an expected call of SendTimestamp.
func (mr *MockAnalyticsServerMockRecorder) SendTimestamp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTimestamp", reflect.TypeOf((*MockAnalyticsServer)(nil).SendTimestamp), arg0, arg1)
}

// mustEmbedUnimplementedAnalyticsServer mocks base method.
func (m *MockAnalyticsServer) mustEmbedUnimplementedAnalyticsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAnalyticsServer")
}

// mustEmbedUnimplementedAnalyticsServer indicates an expected call of mustEmbedUnimplementedAnalyticsServer.
func (mr *MockAnalyticsServerMockRecorder) mustEmbedUnimplementedAnalyticsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAnalyticsServer", reflect.TypeOf((*MockAnalyticsServer)(nil).mustEmbedUnimplementedAnalyticsServer))
}

// MockUnsafeAnalyticsServer is a mock of UnsafeAnalyticsServer interface.
type MockUnsafeAnalyticsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAnalyticsServerMockRecorder
}

// MockUnsafeAnalyticsServerMockRecorder is the mock recorder for MockUnsafeAnalyticsServer.
type MockUnsafeAnalyticsServerMockRecorder struct {
	mock *MockUnsafeAnalyticsServer
}

// NewMockUnsafeAnalyticsServer creates a new mock instance.
func NewMockUnsafeAnalyticsServer(ctrl *gomock.Controller) *MockUnsafeAnalyticsServer {
	mock := &MockUnsafeAnalyticsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAnalyticsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAnalyticsServer) EXPECT() *MockUnsafeAnalyticsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAnalyticsServer mocks base method.
func (m *MockUnsafeAnalyticsServer) mustEmbedUnimplementedAnalyticsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAnalyticsServer")
}

// mustEmbedUnimplementedAnalyticsServer indicates an expected call of mustEmbedUnimplementedAnalyticsServer.
func (mr *MockUnsafeAnalyticsServerMockRecorder) mustEmbedUnimplementedAnalyticsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAnalyticsServer", reflect.TypeOf((*MockUnsafeAnalyticsServer)(nil).mustEmbedUnimplementedAnalyticsServer))
}
